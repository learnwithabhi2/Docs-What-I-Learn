-------------------------------------- Docker ----------------------------

For django projects 

That's an excellent initiative, Abhishek — learning Docker with real-world full-stack projects will give you deep insights into containerization and microservice deployment. Let’s start by building **separate Dockerfiles** for each stack component, mimicking a production-ready architecture.

We'll organize everything in a **microservices-style structure**:

```
project-root/
├── backend/
│   ├── django-app/
│   │   └── Dockerfile
│   ├── java-service/
│   │   └── Dockerfile
│   ├── node-service/
│   │   └── Dockerfile
├── frontend/
│   ├── react-app/
│   │   └── Dockerfile
├── database/
│   └── mongo/
│       └── Dockerfile (optional, but mostly use official image)
├── docker-compose.yml
```

---

## ✅ Let's start with each **Dockerfile** step by step

### 1. **Django Dockerfile**

```dockerfile
# backend/django-app/Dockerfile
FROM python:3.10-slim

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install --upgrade pip && pip install -r requirements.txt

COPY . /app/

CMD ["gunicorn", "your_project_name.wsgi:application", "--bind", "0.0.0.0:8000"]
```

---

### 2. **Java Dockerfile (Spring Boot Example)**

```dockerfile
# backend/java-service/Dockerfile
FROM openjdk:17-jdk-slim

WORKDIR /app

COPY target/your-app.jar app.jar

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "app.jar"]
```

---

### 3. **Node.js Dockerfile**

```dockerfile
# backend/node-service/Dockerfile
FROM node:20-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000
CMD ["node", "index.js"]
```

---

### 4. **React.js Dockerfile**

```dockerfile
# frontend/react-app/Dockerfile
FROM node:20-alpine AS build

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

RUN npm run build

# Serve with nginx
FROM nginx:stable-alpine
COPY --from=build /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

> For `nginx.conf`, I’ll generate a production-ready one for React when you’re ready.

---

### 5. **MongoDB**

* Typically, we use the official image in `docker-compose.yml`:

```yaml
services:
  mongo:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

---

## ✅ docker-compose.yml (Multi-Container Setup)

Here’s a starter layout for all of the above:

```yaml
version: '3.8'

services:
  django:
    build: ./backend/django-app
    container_name: django_app
    ports:
      - "8000:8000"
    depends_on:
      - mongo

  java:
    build: ./backend/java-service
    container_name: java_service
    ports:
      - "8080:8080"

  node:
    build: ./backend/node-service
    container_name: node_service
    ports:
      - "3000:3000"
    depends_on:
      - mongo

  react:
    build: ./frontend/react-app
    container_name: react_frontend
    ports:
      - "80:80"

  mongo:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

---


